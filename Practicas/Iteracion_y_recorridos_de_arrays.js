/*
Ya hemos visto en clases anteriores c√≥mo podemos crear bucles con for y while. Con estas estructuras de control, y una nueva que veremos en este clase, podemos tambi√©n recorrer cada uno de los elementos de un array.

Adem√°s, veremos como los propios arrays tienen un m√©todo .forEach que nos permite ejecutar una funci√≥n para cada uno de los elementos del array.

Bucle while
El bucle while vimos que permit√≠a ejecutar un bloque de c√≥digo mientras una condici√≥n era verdadera. En el caso de la iteraci√≥n de arrays, la condici√≥n generalmente se basa en el √≠ndice del elemento.

Podemos, por ejemplo, crear una variable con let para guardar un puntero al √≠ndice del elemento que estamos iterando. En cada iteraci√≥n, podemos incrementar el valor de la variable en 1, para que en la siguiente iteraci√≥n se imprima el siguiente elemento.
*/

let frutas = ["üçé", "üçå", "üçì"];

let i = 0; // Lo usaremos como indice

while (i < frutas.length) {
  console.log(frutas[i]); // imprime el elemento en la posicion [i]
  i++; // incrementamos el indice en 1 para la siguiente iteracion
}

/*
Bucle for
El bucle for nos permit√≠a ejecutar un bloque de c√≥digo un n√∫mero determinado de veces. En el caso de la iteraci√≥n de arrays, podemos usarlo para recorrer cada uno de los elementos del array, usando la longitud del array como condici√≥n.
*/

let fruit = ["üçé", "üçå", "üçì"];

for (let i = 0; i < fruit.length; i++) {
  console.log(fruit[i]); //imprime el elemto en la posicion [i]
}

/*
Tambi√©n puedes recorrer el array en orden inverso, empezando desde el √∫ltimo elemento hasta el primero, usando i-- en lugar de i++.
*/

let frt = ["üçé", "üçå", "üçì"];

for (let i = frt.length - 1; i >= 0; i--) {
  console.log(frt[i]); //imprime el elemto en la posicion [i]
}

/*
Bucle for...of
Adem√°s de while y for, existe otra estructura de control que nos permite iterar sobre los elementos de un array: for...of. Esta estructura de control es m√°s simple que for, ya que no necesitamos crear una variable para guardar el √≠ndice del elemento que estamos iterando.

Es mucho m√°s sencilla y f√°cil de entender:
*/

let fruta = ["üçé", "üçå", "üçì"];
for (let frutas of fruta) {
  console.log(frutas); //impprime el elemento en la posicion i
}
/*
Como ves, hay algunas limitaciones en el uso de for...of. Por ejemplo, no podemos usarlo para recorrer un array en orden inverso y tampoco tenemos acceso al √≠ndice del elemento que estamos iterando.

El m√©todo array.forEach()
Ya hemos visto en la clase anterior que los arrays tienen m√©todos que nos permiten realizar operaciones sobre ellos, como a√±adir elementos o eliminarlos. Pero tiene muchos m√°s m√©todos que iremos viendo que nos ayuda a trabajar con ellos.

Uno de esos m√©todos es array.forEach(), que nos permite ejecutar una function para cada uno de los elementos del array. Esta funci√≥n recibe como par√°metros el elemento que se est√° iterando en ese momento, el √≠ndice del elemento y el propio array.
*/

let fts = ["üçé", "üçå", "üçì"];
fts.forEach(function (f, index, originalArra) {
  console.log(f);
});

/*
Usando una arrow function e indicando s√≥lo los par√°metros que necesitamos de nuestra funci√≥n podemos simplificarlo a√∫n m√°s:
*/

let frutast = ["üçé", "üçå", "üçì"];
frutas.forEach((frut) => {
  console.log(frut); //imprime el elemto en la posicion i
});

/*
¬øCu√°l usar? Depende...
M√âTODO	ACCESO AL √çNDICE	ACCESO AL VALOR	  PUEDE USAR BREAK	  CONTROL MANUAL DEL √çNDICE
for	          ‚úÖ	                 ‚úÖ	             ‚úÖ	                   ‚úÖ
while	        ‚úÖ	                 ‚úÖ	             ‚úÖ                     ‚úÖ
for...of	    ‚ùå	                 ‚úÖ	             ‚úÖ	                   ‚ùå
forEach	      ‚úÖ	                 ‚úÖ	             ‚ùå*	                   ‚ùå

-Aunque t√©cnicamente no puedes utilizar la sentencia break para salir de forEach, puedes simular esto lanzando una excepci√≥n y captur√°ndola en un bloque try/catch externo. Obviamente es una mala pr√°ctica que no te recomiendo.
Cada uno de estos m√©todos tiene sus propios casos de uso. for y while son m√°s generales y te permiten controlar el √≠ndice manualmente, lo que es √∫til si necesitas saltar a √≠ndices espec√≠ficos, cambiar el orden de iteraci√≥n o salir del bucle antes de que se complete.

for...of es m√°s f√°cil de usar cuando solo necesitas los valores de un array y no te importa el √≠ndice. Es especialmente √∫til tambi√©n cuando est√°s trabajando con iterables que no son arrays, como las cadenas de caracteres o los conjuntos (sets).

Finalmente, forEach es una forma muy eficiente y legible de iterar sobre un array si no necesitas break y si no necesitas controlar manualmente el √≠ndice.
*/

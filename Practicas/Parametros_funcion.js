/*
Hasta ahora hemos visto como crear funciones y c√≥mo llamarlas. Pero para poder desbloquear todo el potencial de las funciones, necesitamos que puedan recibir par√°metros. Esto es, que su comportamiento pueda cambiar seg√∫n los datos que le pasemos.

Imagina que queremos que nuestra funci√≥n de saludar, pueda saludar a cualquier persona, no solo a Yeison. Para ello, podemos hacer que la funci√≥n acepte un par√°metro, que ser√° el nombre de la persona a la que queremos saludar.
*/

function saludar(usuario) {
  console.log("Hola " + usuario);
}

//Ahora, cada vez que llamemos a la funcion, podemos pasarle una cadena de texto
saludar("fransisco"); // -> Hola fransisco
saludar("Miguel"); // -> Hola miguel
saludar("Diana"); // -> Hola Diana

/*
Las funciones son la base de la programaci√≥n y nos permiten crear programas complejos a partir de peque√±as piezas.

Por ejemplo, para crear una calculadora, deber√≠amos empezar a crear funciones que realicen las operaciones b√°sicas. En este caso necesitaremos parametrizar la funci√≥n para que acepte los dos n√∫meros para hacer la operaci√≥n.

function sumar(a, b) {
*/

function suma(a, b) {
  return a + b;
}

function restar(a, b) {
  return a - b;
}

// Y ya podriamos usarlas

const resulSuma = suma(2, 5);
console.log(resulSuma); // -> 7

const resulResta = restar(5, 2);
console.log(resulResta); // -> 3

/*
Par√°metros y argumentos
En el ejemplo anterior, hemos visto que podemos pasarle valores a la funci√≥n cuando la llamamos. A estos valores se les llama argumentos. Y a los valores que recibe la funci√≥n, se les llama par√°metros.
*/

// La funcion sumar tiene dos parametros: a y b
function sumar(a, b) {
  return a + b;
}

//Cuando llamamos a la funcion le pasamos dos argumentos: 2 y 3
const resulRestar = sumar(2, 3);

/*
El orden de los par√°metros importa
Algo muy importante, y un error muy com√∫n al empezar a crear funciones, es olvidar que el orden de los par√°metros importa.

Vamos a crear una funci√≥n que simule un microondas. Le pasaremos el plato, tiempo y potencia. Y nos devolver√° el resultado del plato cocinado.
*/

function cocinarMicroondas(plato, tiempo, potencia) {
  if (plato === "üê•" && tiempo === 1 && potencia === 5) {
    return "üçó";
  }
  if (plato === "ü•ö" && tiempo === 2 && potencia === 3) {
    return "üç≥";
  }
  return "‚ùå Plato no soportado";
}

//Si usamos bien los parametos, la funcion funciona correctamente
const resultado = cocinarMicroondas("üê•", 1, 5);
console.log(resultado); // ->üçó

//Si cmbiamos el orden de los parametos la funcion no funciona
const result = cocinarMicroondas(1, 5, "üê•");
console.log(result); // -> "‚ùåPlato no soportado"

/*
Esto es porque la funci√≥n espera que el primer par√°metro sea el plato, el segundo el tiempo y el tercero la potencia. Si cambiamos el orden, podemos tener comportamientos inesperados o errores.
*/
